#made the build in base of the Dockerfile in . dir
docker build .
#made the build with labels
docker build -t helloword:1.0 . 

#create tags from an existing image
docker tag helloworld:1.0 helloworld:latest

#list the images on the docker cache
docker images

#delete the images from the cache
docker image rm <IMAGE ID>
#force deletion
docker image rm <IMAGE ID> -f

#inspect the insides of an image
docker inspect <REPOSITORY> or <IMAGE ID>

#watch the docker processes running
docker ps
#list all the containeris, even if there are stopped
docker ps -a

#create a container based on an image
docker create <image identifier>
#--name for set the name container
#-p map the port [local_machine_port]:[container_port]
#-p 8080:80 will map the 80 port from the container to the port 8080 of the local machine
#-P when you create with an EXPOSED port from the Dockerfile

#start the container
docker start <container identifier>

#stop a container
docker stop <container indetifier>

#remove a container
docker rm <CONTAINER ID>
#force, even if the container is UP
docker rm <CONTAINER ID> -f

#execute commands in a container
#-it will give us an interactive promp to navigate on the container
docker exec -it <container id> bash
#only sending a command without enter in the container
docker exec <container id> bash -c "<command>"

######################################VOLUMES#####################################
######################################OLD WAY#####################################
docker create --name <container-name> --mount type=bind,source="$(pwd)/app",target=/app <image-id>


######################################NEW WAY#####################################
#list volumes
docker volume ls

#create a volume
docker volume create <volume-name>

#inspect a volume
docker volume inspect <volume-name>

#remove the unused local volumes
docker volume prune

#remove one or more volumes
docker rm <volume-name>

#create the container with the volume using --mount
docker create --mount source=<volume-name>,target=/app --name <container-name> <image>
docker start <container-name>

#create the container with the volume using -v
docker create -v <source>:<target> --name <container-name> <image>
docker start <container-name>
#example
docker create -v <volume-name>:/app --name <container-name> <image>
docker start <container-name>


######################################NETWORK#####################################
#list the networks
docker network ls

#create a network
docker network create --driver <driver-type> <network-name>
#for example
docker network create --driver bridge  <network-name>

#inspect a network
docker inspect <network-name>

#remove one or more networks
docker network rm <network-name>

#create a container using an specific network
docker create --name <container-name> --network <network-name> <image>
docker start <container-name>

######################################DOCKER HUB#####################################
#login
docker login

#first tag the image to upload
docker tag <image-name>:<version> <dockeruser>/<image-name>:<tag>
#then push the image tagged
docker push <dockeruser>/<image-name>:<tag>

#pull the image
docker pull <dockeruser>/<image-name>:<tag>


######################################ENV VARS#####################################
#-e flag for env vars, -e can be used multiple times
docker create -e <var-name>=<var-value> --name <container-name> <image>
