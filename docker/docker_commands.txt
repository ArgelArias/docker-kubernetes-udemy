#made the build in base of the Dockerfile in . dir
docker build .
#made the build with labels
docker build -t helloword:1.0 . 

#create tags from an existing image
docker tag helloworld:1.0 helloworld:latest

#list the images on the docker cache
docker images

#delete the images from the cache
docker image rm <IMAGE ID>
#force deletion
docker image rm <IMAGE ID> -f

#inspect the insides of an image
docker inspect <REPOSITORY> or <IMAGE ID>

#watch the docker processes running
docker ps
#list all the containeris, even if there are stopped
docker ps -a

#create a container based on an image
docker create <image identifier>
#--name for set the name container
#-p map the port [local_machine_port]:[container_port]
#-p 8080:80 will map the 80 port from the container to the port 8080 of the local machine
#-P when you create with an EXPOSED port from the Dockerfile

#start the container
docker start <container-name>

#stop a container
docker stop <container-name>

#restart a container
docker restart <container-name>

#kill a container
docker kill <container-name>

#pause a container
docker pause <container-name>

#unpause a container
docker unpause <container-name>

#create and start the container with one command
docker run -d <image-id>

#remove a container
docker rm <CONTAINER ID>
#force, even if the container is UP
docker rm <CONTAINER ID> -f

#execute commands in a container
#-it will give us an interactive promp to navigate on the container
docker exec -it <container id> bash
#only sending a command without enter in the container
docker exec <container id> bash -c "<command>"

######################################VOLUMES#####################################
######################################OLD WAY#####################################
docker create --name <container-name> --mount type=bind,source="$(pwd)/app",target=/app <image-id>


######################################NEW WAY#####################################
#list volumes
docker volume ls

#create a volume
docker volume create <volume-name>

#inspect a volume
docker volume inspect <volume-name>

#remove the unused local volumes
docker volume prune

#remove one or more volumes
docker rm <volume-name>

#create the container with the volume using --mount
docker create --mount source=<volume-name>,target=/app --name <container-name> <image>
docker start <container-name>

#create the container with the volume using -v
docker create -v <source>:<target> --name <container-name> <image>
docker start <container-name>
#example
docker create -v <volume-name>:/app --name <container-name> <image>
docker start <container-name>


######################################NETWORK#####################################
#list the networks
docker network ls

#create a network
docker network create --driver <driver-type> <network-name>
#for example
docker network create --driver bridge  <network-name>

#inspect a network
docker inspect <network-name>

#remove one or more networks
docker network rm <network-name>

#create a container using an specific network
docker create --name <container-name> --network <network-name> <image>
docker start <container-name>

######################################DOCKER HUB#####################################
#login
docker login

#logout
docker logout

#first tag the image to upload
docker tag <image-name>:<version> <dockeruser>/<image-name>:<tag>
#then push the image tagged
docker push <dockeruser>/<image-name>:<tag>

#pull the image
docker pull <dockeruser>/<image-name>:<tag>


######################################ENV VARS#####################################
#-e flag for env vars, -e can be used multiple times
docker create -e <var-name>=<var-value> --name <container-name> <image>


######################################RESTART POLICIES#####################################
-no:  no restart, default value
-on-failure[:max-retries]
-always: will restart on failure, restart of the principal machine, will restart even on stop from the user
-unless-stopped: will restart on failure, restart of the principal machine, will not restart on stop from the user

#example
docker create --name <container-name> --restart always <image>
docker run --name <container-name> --restart unless-stopped -d <image>

#update the policy on a running container
docker update --restart no <container-name>


######################################COMMIT#####################################
#creates a new image based on a container
#for example you made some changes on a container that you want to be persistant so create a new image based on those changes
docker commit <container-name> <new-image-name>:<tag>



######################################MORE COMMANDS#####################################
#copy files between container and local files and viceversa
docker cp <container-name>:<container-path> <local-path>

#watch the changes of the files in the container vs the original of the image
docker diff <container-name>

#watch all the docker events in real time
docker events

#export a container filesystem to a tar
docker export <container-name> -o <file.tar>

#import from a tar to a image
docker import <file.tar> <image-name>:<tag>

#watch the history of an image
docker history <image-name>

#load an image from the STDIN
cat <image-file> | docker load

#watch to logs of a container, like a tail
docker logs <container-name>
#or as tail -f
docker logs <container-name> -f

#watch the mapping ports of a container
docker port <container-name>

#rename a container
docker rename <container-name> <new-container-name>

#other way to remove an image
docker rmi <image-name>

#save an image to a tar
docker save <image-name> -o <file.tar>

#search an image in the docker hub
docker search <string-to-search>

#watcht the stats of the containers
docker stats
#or only the required container
docker stats <container-name>

#watch the process on a container in a top way
docker top <container-name>

#block until a container stops, and print the exit code
docker wait <container-name>
